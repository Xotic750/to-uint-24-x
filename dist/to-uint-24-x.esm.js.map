{"version":3,"sources":["../src/to-uint-24-x.js"],"names":[],"mappings":"AAAA,OAAO,QAAP,MAAqB,aAArB;AACA,OAAO,MAAP,MAAmB,UAAnB;AACA,OAAO,IAAP,MAAiB,aAAjB;AACA,OAAO,cAAP,MAA2B,aAA3B;IAEO,K,GAAc,I,CAAd,K;IAAO,G,GAAO,I,CAAP,G;AAEd;;;;;;;;AAOA,eAAe,SAAS,QAAT,CAAkB,QAAlB,EAA4B;AACzC;AACA,MAAM,MAAM,GAAG,QAAQ,CAAC,QAAD,CAAvB,CAFyC,CAIzC;;AACA,MAAI,MAAM,KAAK,CAAX,IAAgB,cAAc,CAAC,MAAD,CAAd,KAA2B,KAA/C,EAAsD;AACpD,WAAO,CAAP;AACD,GAPwC,CASzC;AACA;AACA;;;AACA,SAAO,MAAM,CAAC,IAAI,CAAC,MAAD,CAAJ,GAAe,KAAK,CAAC,GAAG,CAAC,MAAD,CAAJ,CAArB,EAAoC,SAApC,CAAb;AACD","file":"to-uint-24-x.esm.js","sourcesContent":["import toNumber from 'to-number-x';\nimport modulo from 'modulo-x';\nimport sign from 'math-sign-x';\nimport numberIsFinite from 'is-finite-x';\n\nconst {floor, abs} = Math;\n\n/**\n * The abstract operation ToUint24 converts argument to one of 2^24 integer\n * values in the range 0 through 2^24-1, inclusive.\n *\n * @param {number} argument - The argument to convert to one of 2^24 integers.\n * @returns {number} Integer value, 0 through 2^24-1, inclusive.\n */\nexport default function toUint24(argument) {\n  // Let number be ? ToNumber(argument).\n  const number = toNumber(argument);\n\n  // If number is NaN, +0, -0, +∞, or -∞, return +0.\n  if (number === 0 || numberIsFinite(number) === false) {\n    return 0;\n  }\n\n  // Let int be the mathematical value that is the same sign as number and\n  // whose magnitude is floor(abs(number)).\n  // Let int24bit be int modulo 2^24.\n  return modulo(sign(number) * floor(abs(number)), 0x1000000);\n}\n"]}